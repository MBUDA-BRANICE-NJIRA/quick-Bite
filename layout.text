import 'dart:io';

import 'package:flutter/material.dart';
import 'package:image_picker/image_picker.dart';

// Models
class Product {
  final String id;
  String name;
  String description;
  double price;
  String category;
  String imageUrl;

  Product({
    required this.id,
    required this.name,
    required this.description,
    required this.price,
    required this.category,
    required this.imageUrl,
  });
}

class Order {
  final String id;
  final String customerName;
  final List<String> items;
  final double total;
  final String status;
  final DateTime date;

  Order({
    required this.id,
    required this.customerName,
    required this.items,
    required this.total,
    required this.status,
    required this.date,
  });
}

class User {
  final String id;
  final String name;
  final String email;
  final String phone;
  final DateTime joinDate;

  User({
    required this.id,
    required this.name,
    required this.email,
    required this.phone,
    required this.joinDate,
  });
}

// Main Dashboard Screen
class Admindashboard extends StatefulWidget {
  static const routeName = '/Admindashboard';
  const Admindashboard({super.key});

  @override
  State<Admindashboard> createState() => _AdmindashboardState();
}

class _AdmindashboardState extends State<Admindashboard> {
  int _currentIndex = 0;
  String adminName = "Admin User";
  String adminEmail = "admin@foodapp.com";
  File? profileImage;

  // Sample data
  List<Product> products = [
    Product(
      id: '1',
      name: 'Burger Deluxe',
      description: 'Juicy beef burger with cheese',
      price: 12.99,
      category: 'Burgers',
      imageUrl: 'https://via.placeholder.com/150',
    ),
    Product(
      id: '2',
      name: 'Pizza Margherita',
      description: 'Classic pizza with tomato and mozzarella',
      price: 15.99,
      category: 'Pizza',
      imageUrl: 'https://via.placeholder.com/150',
    ),
  ];

  List<Order> orders = [
    Order(
      id: 'ORD001',
      customerName: 'John Doe',
      items: ['Burger Deluxe', 'Fries'],
      total: 18.99,
      status: 'Pending',
      date: DateTime.now(),
    ),
    Order(
      id: 'ORD002',
      customerName: 'Jane Smith',
      items: ['Pizza Margherita'],
      total: 15.99,
      status: 'Completed',
      date: DateTime.now().subtract(Duration(hours: 2)),
    ),
  ];

  List<User> users = [
    User(
      id: '1',
      name: 'John Doe',
      email: 'john@email.com',
      phone: '+1234567890',
      joinDate: DateTime.now().subtract(Duration(days: 30)),
    ),
    User(
      id: '2',
      name: 'Jane Smith',
      email: 'jane@email.com',
      phone: '+1234567891',
      joinDate: DateTime.now().subtract(Duration(days: 15)),
    ),
  ];

  @override
  Widget build(BuildContext context) {
    List<Widget> screens = [
      DashboardHomeScreen(products: products, orders: orders, users: users),
      ProductsScreen(
        products: products,
        onAddProduct: _addProduct,
        onEditProduct: _editProduct,
        onDeleteProduct: _deleteProduct,
      ),
      OrdersScreen(orders: orders),
      UsersScreen(users: users),
      ProfileScreen(
        adminName: adminName,
        adminEmail: adminEmail,
        profileImage: profileImage,
        onUpdateProfile: _updateProfile,
        onPickImage: _pickImage,
        onLogout: _logout,
      ),
    ];

    return Scaffold(
      body: screens[_currentIndex],
      bottomNavigationBar: BottomNavigationBar(
        currentIndex: _currentIndex,
        onTap: (index) => setState(() => _currentIndex = index),
        type: BottomNavigationBarType.fixed,
        selectedItemColor: Colors.orange,
        unselectedItemColor: Colors.grey,
        items: [
          BottomNavigationBarItem(
            icon: Icon(Icons.dashboard),
            label: 'Dashboard',
          ),
          BottomNavigationBarItem(
            icon: Icon(Icons.restaurant_menu),
            label: 'Products',
          ),
          BottomNavigationBarItem(
            icon: Icon(Icons.shopping_cart),
            label: 'Orders',
          ),
          BottomNavigationBarItem(icon: Icon(Icons.people), label: 'Users'),
          BottomNavigationBarItem(icon: Icon(Icons.person), label: 'Profile'),
        ],
      ),
    );
  }

  void _addProduct(Product product) {
    setState(() {
      products.add(product);
    });
  }

  void _editProduct(String id, Product updatedProduct) {
    setState(() {
      int index = products.indexWhere((p) => p.id == id);
      if (index != -1) {
        products[index] = updatedProduct;
      }
    });
  }

  void _deleteProduct(String id) {
    setState(() {
      products.removeWhere((p) => p.id == id);
    });
  }

  void _updateProfile(String name, String email) {
    setState(() {
      adminName = name;
      adminEmail = email;
    });
  }

  Future<void> _pickImage() async {
    final picker = ImagePicker();
    final pickedFile = await picker.pickImage(source: ImageSource.gallery);

    if (pickedFile != null) {
      setState(() {
        profileImage = File(pickedFile.path);
      });
    }
  }

  void _logout() {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text('Logout'),
        content: Text('Are you sure you want to logout?'),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: Text('Cancel'),
          ),
          TextButton(
            onPressed: () {
              Navigator.pop(context);
              // Add logout logic here
              ScaffoldMessenger.of(context).showSnackBar(
                SnackBar(content: Text('Logged out successfully')),
              );
            },
            child: Text('Logout'),
          ),
        ],
      ),
    );
  }
}

// Dashboard Home Screen
class DashboardHomeScreen extends StatelessWidget {
  final List<Product> products;
  final List<Order> orders;
  final List<User> users;

  DashboardHomeScreen({
    required this.products,
    required this.orders,
    required this.users,
  });

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Dashboard'), backgroundColor: Colors.orange),
      body: Padding(
        padding: EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              'Overview',
              style: TextStyle(fontSize: 24, fontWeight: FontWeight.bold),
            ),
            SizedBox(height: 16),
            Row(
              children: [
                Expanded(
                  child: _buildStatCard(
                    'Total Products',
                    products.length.toString(),
                    Icons.restaurant_menu,
                    Colors.blue,
                  ),
                ),
                SizedBox(width: 12),
                Expanded(
                  child: _buildStatCard(
                    'Total Orders',
                    orders.length.toString(),
                    Icons.shopping_cart,
                    Colors.green,
                  ),
                ),
              ],
            ),
            SizedBox(height: 12),
            Row(
              children: [
                Expanded(
                  child: _buildStatCard(
                    'Total Users',
                    users.length.toString(),
                    Icons.people,
                    Colors.purple,
                  ),
                ),
                SizedBox(width: 12),
                Expanded(
                  child: _buildStatCard(
                    'Revenue',
                    '\$${orders.fold(0.0, (sum, order) => sum + order.total).toStringAsFixed(2)}',
                    Icons.attach_money,
                    Colors.orange,
                  ),
                ),
              ],
            ),
            SizedBox(height: 24),
            Text(
              'Recent Orders',
              style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold),
            ),
            SizedBox(height: 12),
            Expanded(
              child: ListView.builder(
                itemCount: orders.take(5).length,
                itemBuilder: (context, index) {
                  final order = orders[index];
                  return Card(
                    child: ListTile(
                      leading: CircleAvatar(
                        backgroundColor: Colors.orange,
                        child: Text(order.id.substring(3)),
                      ),
                      title: Text(order.customerName),
                      subtitle: Text('Total: \$${order.total}'),
                      trailing: Container(
                        padding: EdgeInsets.symmetric(
                          horizontal: 8,
                          vertical: 4,
                        ),
                        decoration: BoxDecoration(
                          color: order.status == 'Completed'
                              ? Colors.green
                              : Colors.orange,
                          borderRadius: BorderRadius.circular(12),
                        ),
                        child: Text(
                          order.status,
                          style: TextStyle(color: Colors.white, fontSize: 12),
                        ),
                      ),
                    ),
                  );
                },
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildStatCard(
    String title,
    String value,
    IconData icon,
    Color color,
  ) {
    return Card(
      child: Padding(
        padding: EdgeInsets.all(16),
        child: Column(
          children: [
            Icon(icon, size: 32, color: color),
            SizedBox(height: 8),
            Text(
              value,
              style: TextStyle(fontSize: 24, fontWeight: FontWeight.bold),
            ),
            Text(
              title,
              style: TextStyle(fontSize: 12, color: Colors.grey),
              textAlign: TextAlign.center,
            ),
          ],
        ),
      ),
    );
  }
}

// Products Screen
class ProductsScreen extends StatelessWidget {
  final List<Product> products;
  final Function(Product) onAddProduct;
  final Function(String, Product) onEditProduct;
  final Function(String) onDeleteProduct;

  ProductsScreen({
    required this.products,
    required this.onAddProduct,
    required this.onEditProduct,
    required this.onDeleteProduct,
  });

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Products'),
        backgroundColor: Colors.orange,
        actions: [
          IconButton(
            icon: Icon(Icons.add),
            onPressed: () => _showProductDialog(context),
          ),
        ],
      ),
      body: ListView.builder(
        padding: EdgeInsets.all(16),
        itemCount: products.length,
        itemBuilder: (context, index) {
          final product = products[index];
          return Card(
            child: ListTile(
              leading: CircleAvatar(
                backgroundColor: Colors.orange,
                child: Icon(Icons.restaurant, color: Colors.white),
              ),
              title: Text(product.name),
              subtitle: Text('${product.category} - \$${product.price}'),
              trailing: PopupMenuButton(
                itemBuilder: (context) => [
                  PopupMenuItem(value: 'edit', child: Text('Edit')),
                  PopupMenuItem(value: 'delete', child: Text('Delete')),
                ],
                onSelected: (value) {
                  if (value == 'edit') {
                    _showProductDialog(context, product: product);
                  } else if (value == 'delete') {
                    _showDeleteDialog(context, product);
                  }
                },
              ),
            ),
          );
        },
      ),
    );
  }

  void _showProductDialog(BuildContext context, {Product? product}) {
    final nameController = TextEditingController(text: product?.name ?? '');
    final descController = TextEditingController(
      text: product?.description ?? '',
    );
    final priceController = TextEditingController(
      text: product?.price.toString() ?? '',
    );
    final categoryController = TextEditingController(
      text: product?.category ?? '',
    );
    final imageController = TextEditingController(
      text: product?.imageUrl ?? '',
    );

    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text(product == null ? 'Add Product' : 'Edit Product'),
        content: SingleChildScrollView(
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              TextField(
                controller: nameController,
                decoration: InputDecoration(labelText: 'Product Name'),
              ),
              TextField(
                controller: descController,
                decoration: InputDecoration(labelText: 'Description'),
              ),
              TextField(
                controller: priceController,
                decoration: InputDecoration(labelText: 'Price'),
                keyboardType: TextInputType.number,
              ),
              TextField(
                controller: categoryController,
                decoration: InputDecoration(labelText: 'Category'),
              ),
              TextField(
                controller: imageController,
                decoration: InputDecoration(labelText: 'Image URL'),
              ),
            ],
          ),
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: Text('Cancel'),
          ),
          TextButton(
            onPressed: () {
              final newProduct = Product(
                id:
                    product?.id ??
                    DateTime.now().millisecondsSinceEpoch.toString(),
                name: nameController.text,
                description: descController.text,
                price: double.tryParse(priceController.text) ?? 0.0,
                category: categoryController.text,
                imageUrl: imageController.text,
              );

              if (product == null) {
                onAddProduct(newProduct);
              } else {
                onEditProduct(product.id, newProduct);
              }
              Navigator.pop(context);
            },
            child: Text('Save'),
          ),
        ],
      ),
    );
  }

  void _showDeleteDialog(BuildContext context, Product product) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text('Delete Product'),
        content: Text('Are you sure you want to delete ${product.name}?'),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: Text('Cancel'),
          ),
          TextButton(
            onPressed: () {
              onDeleteProduct(product.id);
              Navigator.pop(context);
            },
            child: Text('Delete'),
          ),
        ],
      ),
    );
  }
}

// Orders Screen
class OrdersScreen extends StatelessWidget {
  final List<Order> orders;

  OrdersScreen({required this.orders});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Orders'), backgroundColor: Colors.orange),
      body: ListView.builder(
        padding: EdgeInsets.all(16),
        itemCount: orders.length,
        itemBuilder: (context, index) {
          final order = orders[index];
          return Card(
            child: ExpansionTile(
              leading: CircleAvatar(
                backgroundColor: Colors.orange,
                child: Text(order.id.substring(3)),
              ),
              title: Text(order.customerName),
              subtitle: Text('Total: \$${order.total} - ${order.status}'),
              children: [
                Padding(
                  padding: EdgeInsets.all(16),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        'Items:',
                        style: TextStyle(fontWeight: FontWeight.bold),
                      ),
                      ...order.items.map((item) => Text('• $item')),
                      SizedBox(height: 8),
                      Text('Date: ${order.date.toString().split('.')[0]}'),
                    ],
                  ),
                ),
              ],
            ),
          );
        },
      ),
    );
  }
}

// Users Screen
class UsersScreen extends StatelessWidget {
  final List<User> users;

  UsersScreen({required this.users});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Users'), backgroundColor: Colors.orange),
      body: ListView.builder(
        padding: EdgeInsets.all(16),
        itemCount: users.length,
        itemBuilder: (context, index) {
          final user = users[index];
          return Card(
            child: ListTile(
              leading: CircleAvatar(
                backgroundColor: Colors.orange,
                child: Text(user.name[0].toUpperCase()),
              ),
              title: Text(user.name),
              subtitle: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(user.email),
                  Text(user.phone),
                  Text('Joined: ${user.joinDate.toString().split(' ')[0]}'),
                ],
              ),
              isThreeLine: true,
            ),
          );
        },
      ),
    );
  }
}

// Profile Screen
class ProfileScreen extends StatelessWidget {
  final String adminName;
  final String adminEmail;
  final File? profileImage;
  final Function(String, String) onUpdateProfile;
  final Function() onPickImage;
  final Function() onLogout;

  ProfileScreen({
    required this.adminName,
    required this.adminEmail,
    required this.profileImage,
    required this.onUpdateProfile,
    required this.onPickImage,
    required this.onLogout,
  });

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Profile'), backgroundColor: Colors.orange),
      body: Padding(
        padding: EdgeInsets.all(16),
        child: Column(
          children: [
            GestureDetector(
              onTap: onPickImage,
              child: CircleAvatar(
                radius: 50,
                backgroundColor: Colors.orange,
                backgroundImage: profileImage != null
                    ? FileImage(profileImage!)
                    : null,
                child: profileImage == null
                    ? Icon(Icons.person, size: 50, color: Colors.white)
                    : null,
              ),
            ),
            SizedBox(height: 16),
            Text(
              adminName,
              style: TextStyle(fontSize: 24, fontWeight: FontWeight.bold),
            ),
            Text(
              adminEmail,
              style: TextStyle(fontSize: 16, color: Colors.grey),
            ),
            SizedBox(height: 32),
            Card(
              child: ListTile(
                leading: Icon(Icons.edit),
                title: Text('Edit Profile'),
                onTap: () => _showEditProfileDialog(context),
              ),
            ),
            Card(
              child: ListTile(
                leading: Icon(Icons.logout),
                title: Text('Logout'),
                onTap: onLogout,
              ),
            ),
          ],
        ),
      ),
    );
  }

  void _showEditProfileDialog(BuildContext context) {
    final nameController = TextEditingController(text: adminName);
    final emailController = TextEditingController(text: adminEmail);

    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text('Edit Profile'),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            TextField(
              controller: nameController,
              decoration: InputDecoration(labelText: 'Name'),
            ),
            TextField(
              controller: emailController,
              decoration: InputDecoration(labelText: 'Email'),
            ),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: Text('Cancel'),
          ),
          TextButton(
            onPressed: () {
              onUpdateProfile(nameController.text, emailController.text);
              Navigator.pop(context);
            },
            child: Text('Save'),
          ),
        ],
      ),
    );
  }
}
